{"ast":null,"code":"import { normalizeValues } from './utils';\nvar thicknessPad = {\n  xlarge: 'large',\n  large: 'medium',\n  medium: 'small',\n  small: 'xsmall',\n  xsmall: 'xxsmall'\n};\nexport var round = function round(value, decimals) {\n  return Number(Math.round(value + \"e\" + decimals) + \"e-\" + decimals);\n};\nvar alignMax = function alignMax(value, interval) {\n  if (value > 0) return value - value % interval + interval;\n  if (value < 0) return value + value % interval;\n  return value;\n};\nvar alignMin = function alignMin(value, interval) {\n  if (value > 0) return value - value % interval;\n  if (value < 0) return value - value % interval - interval;\n  return value;\n};\nexport var calcBounds = function calcBounds(values, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // coarseness influences the rounding of the bounds, the smaller the\n  // number, the more the bounds will be rounded. e.g. 111 -> 110 -> 100\n  // Normalize to an array. Backwards compatible has no coarseness for x-axis\n  var coarseness = Array.isArray(options.coarseness) && options.coarseness || options.coarseness && [undefined, options.coarseness] || [undefined, 5];\n  var coarseX = coarseness[0],\n    coarseY = coarseness[1];\n  // the number of steps is one less than the number of labels\n  var steps = options.steps || [1, 1];\n  var stepsY = steps[1];\n  var calcValues = normalizeValues(values || []);\n\n  // min and max values\n  var minX;\n  var maxX;\n  var minY;\n  var maxY;\n  if (calcValues.length) {\n    // Calculate the max and min values.\n    calcValues.filter(function (value) {\n      return value !== undefined;\n    }).forEach(function (value) {\n      var x = value.value[0];\n      if (x !== undefined) {\n        minX = minX === undefined ? x : Math.min(minX, x);\n        maxX = maxX === undefined ? x : Math.max(maxX, x);\n      }\n      var y = value.value[1];\n      if (y !== undefined) {\n        minY = minY === undefined ? y : Math.min(minY, y);\n        maxY = maxY === undefined ? y : Math.max(maxY, y);\n      }\n      // handle ranges of values\n      var y2 = value.value[2];\n      if (y2 !== undefined) {\n        minY = Math.min(minY, y2);\n        maxY = Math.max(maxY, y2);\n      }\n    });\n\n    // when max === min, offset them so we can show something\n    if (maxX === minX) {\n      if (maxX > 0) minX = maxX - 1;else maxX = minX + 1;\n    }\n    if (maxY === minY) {\n      if (maxY > 0) minY = maxY - 1;else maxY = minY + 1;\n    }\n\n    // Calculate some reasonable bounds based on the max and min values.\n    // This is so values like 87342.12 don't end up being displayed as the\n    // graph axis labels.\n    if (coarseX) {\n      var deltaX = maxX - minX;\n      var intervalX = Number.parseFloat((deltaX / coarseX).toPrecision(1));\n      minX = alignMin(minX, intervalX);\n      maxX = alignMax(maxX, intervalX);\n    }\n    if (coarseY) {\n      var deltaY = maxY - minY;\n      var intervalY = Number.parseFloat((deltaY / coarseY).toPrecision(1));\n      minY = alignMin(minY, intervalY);\n      maxY = alignMax(maxY, intervalY);\n    }\n    if (minY < 0 && maxY > 0 && Math.abs(minY) !== Math.abs(maxY)) {\n      // Adjust min and max when crossing 0 to ensure 0 will be shown on\n      // the Y axis based on the number of steps.\n      if (stepsY === 1) {\n        var largest = Math.max(Math.abs(minY), Math.abs(maxY));\n        minY = -largest;\n        maxY = largest;\n      } else {\n        var stepInterval = (maxY - minY) / stepsY;\n        var minSteps = minY / stepInterval;\n        var maxSteps = maxY / stepInterval;\n        if (Math.abs(minSteps) < Math.abs(maxSteps)) {\n          // more above than below\n          stepInterval = maxY / Math.floor(maxSteps);\n          maxY = stepInterval * Math.floor(maxSteps);\n          minY = stepInterval * Math.floor(minSteps);\n        } else {\n          // more below than above\n          stepInterval = Math.abs(minY / Math.ceil(minSteps));\n          minY = stepInterval * Math.ceil(minSteps);\n          maxY = stepInterval * Math.ceil(maxSteps);\n        }\n      }\n    }\n  }\n  var bounds;\n  if (calcValues.length) bounds = [[minX, maxX], [minY, maxY]];else bounds = [[], []];\n  return bounds;\n};\nexport var calcs = function calcs(values, options) {\n  if (values === void 0) {\n    values = [];\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  // the number of steps is one less than the number of labels\n  var steps = options.steps || [1, 1];\n  var stepsX = steps[0],\n    stepsY = steps[1];\n  var bounds = options.bounds || calcBounds(values, options);\n  if (options.min !== undefined) bounds[1][0] = options.min;\n  if (options.max !== undefined) bounds[1][1] = options.max;\n  var boundsX = bounds[0],\n    boundsY = bounds[1];\n  var boundsXmin = boundsX[0],\n    boundsXmax = boundsX[1];\n  var boundsYmin = boundsY[0],\n    boundsYmax = boundsY[1];\n  var dimensions = [round(boundsXmax - boundsXmin, 2), round(boundsYmax - boundsYmin, 2)];\n  var dimensionsX = dimensions[0],\n    dimensionsY = dimensions[1];\n\n  // Calculate x and y axis values across the specfied number of steps.\n  var yAxis = [];\n  var y = boundsYmax;\n  // To deal with javascript math limitations, round the step with 4 decimal\n  // places and then push the values with 2 decimal places\n  var yStepInterval = round(dimensionsY / stepsY, 4);\n  while (round(y, 2) >= boundsYmin) {\n    yAxis.push(round(y, 2));\n    y -= yStepInterval;\n  }\n  var xAxis = [];\n  var x = boundsXmin;\n  var xStepInterval = round(dimensionsX / stepsX, 4);\n  while (round(x, 2) <= boundsXmax) {\n    xAxis.push(round(x, 2));\n    x += xStepInterval;\n  }\n  var _options = options,\n    thickness = _options.thickness;\n  if (!thickness) {\n    // Set bar thickness based on number of values being rendered.\n    // Someday, it would be better to include the actual rendered size.\n    // These values were emirically determined, trying to balance visibility\n    // and overlap across resolutions.\n    if (values.length < 5) {\n      thickness = 'xlarge';\n    } else if (values.length < 11) {\n      thickness = 'large';\n    } else if (values.length < 21) {\n      thickness = 'medium';\n    } else if (values.length < 61) {\n      thickness = 'small';\n    } else if (values.length < 121) {\n      thickness = 'xsmall';\n    } else {\n      thickness = 'hair';\n    }\n  }\n  var pad = thicknessPad[thickness];\n  return {\n    axis: [xAxis, yAxis],\n    bounds: bounds,\n    dimensions: dimensions,\n    pad: pad,\n    thickness: thickness\n  };\n};","map":{"version":3,"names":["normalizeValues","thicknessPad","xlarge","large","medium","small","xsmall","round","value","decimals","Number","Math","alignMax","interval","alignMin","calcBounds","values","options","coarseness","Array","isArray","undefined","coarseX","coarseY","steps","stepsY","calcValues","minX","maxX","minY","maxY","length","filter","forEach","x","min","max","y","y2","deltaX","intervalX","parseFloat","toPrecision","deltaY","intervalY","abs","largest","stepInterval","minSteps","maxSteps","floor","ceil","bounds","calcs","stepsX","boundsX","boundsY","boundsXmin","boundsXmax","boundsYmin","boundsYmax","dimensions","dimensionsX","dimensionsY","yAxis","yStepInterval","push","xAxis","xStepInterval","_options","thickness","pad","axis"],"sources":["C:/Users/malch/OneDrive/Documents/Projects/chucode/node_modules/grommet/es6/components/Chart/calcs.js"],"sourcesContent":["import { normalizeValues } from './utils';\nvar thicknessPad = {\n  xlarge: 'large',\n  large: 'medium',\n  medium: 'small',\n  small: 'xsmall',\n  xsmall: 'xxsmall'\n};\nexport var round = function round(value, decimals) {\n  return Number(Math.round(value + \"e\" + decimals) + \"e-\" + decimals);\n};\nvar alignMax = function alignMax(value, interval) {\n  if (value > 0) return value - value % interval + interval;\n  if (value < 0) return value + value % interval;\n  return value;\n};\nvar alignMin = function alignMin(value, interval) {\n  if (value > 0) return value - value % interval;\n  if (value < 0) return value - value % interval - interval;\n  return value;\n};\nexport var calcBounds = function calcBounds(values, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  // coarseness influences the rounding of the bounds, the smaller the\n  // number, the more the bounds will be rounded. e.g. 111 -> 110 -> 100\n  // Normalize to an array. Backwards compatible has no coarseness for x-axis\n  var coarseness = Array.isArray(options.coarseness) && options.coarseness || options.coarseness && [undefined, options.coarseness] || [undefined, 5];\n  var coarseX = coarseness[0],\n    coarseY = coarseness[1];\n  // the number of steps is one less than the number of labels\n  var steps = options.steps || [1, 1];\n  var stepsY = steps[1];\n  var calcValues = normalizeValues(values || []);\n\n  // min and max values\n  var minX;\n  var maxX;\n  var minY;\n  var maxY;\n  if (calcValues.length) {\n    // Calculate the max and min values.\n    calcValues.filter(function (value) {\n      return value !== undefined;\n    }).forEach(function (value) {\n      var x = value.value[0];\n      if (x !== undefined) {\n        minX = minX === undefined ? x : Math.min(minX, x);\n        maxX = maxX === undefined ? x : Math.max(maxX, x);\n      }\n      var y = value.value[1];\n      if (y !== undefined) {\n        minY = minY === undefined ? y : Math.min(minY, y);\n        maxY = maxY === undefined ? y : Math.max(maxY, y);\n      }\n      // handle ranges of values\n      var y2 = value.value[2];\n      if (y2 !== undefined) {\n        minY = Math.min(minY, y2);\n        maxY = Math.max(maxY, y2);\n      }\n    });\n\n    // when max === min, offset them so we can show something\n    if (maxX === minX) {\n      if (maxX > 0) minX = maxX - 1;else maxX = minX + 1;\n    }\n    if (maxY === minY) {\n      if (maxY > 0) minY = maxY - 1;else maxY = minY + 1;\n    }\n\n    // Calculate some reasonable bounds based on the max and min values.\n    // This is so values like 87342.12 don't end up being displayed as the\n    // graph axis labels.\n    if (coarseX) {\n      var deltaX = maxX - minX;\n      var intervalX = Number.parseFloat((deltaX / coarseX).toPrecision(1));\n      minX = alignMin(minX, intervalX);\n      maxX = alignMax(maxX, intervalX);\n    }\n    if (coarseY) {\n      var deltaY = maxY - minY;\n      var intervalY = Number.parseFloat((deltaY / coarseY).toPrecision(1));\n      minY = alignMin(minY, intervalY);\n      maxY = alignMax(maxY, intervalY);\n    }\n    if (minY < 0 && maxY > 0 && Math.abs(minY) !== Math.abs(maxY)) {\n      // Adjust min and max when crossing 0 to ensure 0 will be shown on\n      // the Y axis based on the number of steps.\n      if (stepsY === 1) {\n        var largest = Math.max(Math.abs(minY), Math.abs(maxY));\n        minY = -largest;\n        maxY = largest;\n      } else {\n        var stepInterval = (maxY - minY) / stepsY;\n        var minSteps = minY / stepInterval;\n        var maxSteps = maxY / stepInterval;\n        if (Math.abs(minSteps) < Math.abs(maxSteps)) {\n          // more above than below\n          stepInterval = maxY / Math.floor(maxSteps);\n          maxY = stepInterval * Math.floor(maxSteps);\n          minY = stepInterval * Math.floor(minSteps);\n        } else {\n          // more below than above\n          stepInterval = Math.abs(minY / Math.ceil(minSteps));\n          minY = stepInterval * Math.ceil(minSteps);\n          maxY = stepInterval * Math.ceil(maxSteps);\n        }\n      }\n    }\n  }\n  var bounds;\n  if (calcValues.length) bounds = [[minX, maxX], [minY, maxY]];else bounds = [[], []];\n  return bounds;\n};\nexport var calcs = function calcs(values, options) {\n  if (values === void 0) {\n    values = [];\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  // the number of steps is one less than the number of labels\n  var steps = options.steps || [1, 1];\n  var stepsX = steps[0],\n    stepsY = steps[1];\n  var bounds = options.bounds || calcBounds(values, options);\n  if (options.min !== undefined) bounds[1][0] = options.min;\n  if (options.max !== undefined) bounds[1][1] = options.max;\n  var boundsX = bounds[0],\n    boundsY = bounds[1];\n  var boundsXmin = boundsX[0],\n    boundsXmax = boundsX[1];\n  var boundsYmin = boundsY[0],\n    boundsYmax = boundsY[1];\n  var dimensions = [round(boundsXmax - boundsXmin, 2), round(boundsYmax - boundsYmin, 2)];\n  var dimensionsX = dimensions[0],\n    dimensionsY = dimensions[1];\n\n  // Calculate x and y axis values across the specfied number of steps.\n  var yAxis = [];\n  var y = boundsYmax;\n  // To deal with javascript math limitations, round the step with 4 decimal\n  // places and then push the values with 2 decimal places\n  var yStepInterval = round(dimensionsY / stepsY, 4);\n  while (round(y, 2) >= boundsYmin) {\n    yAxis.push(round(y, 2));\n    y -= yStepInterval;\n  }\n  var xAxis = [];\n  var x = boundsXmin;\n  var xStepInterval = round(dimensionsX / stepsX, 4);\n  while (round(x, 2) <= boundsXmax) {\n    xAxis.push(round(x, 2));\n    x += xStepInterval;\n  }\n  var _options = options,\n    thickness = _options.thickness;\n  if (!thickness) {\n    // Set bar thickness based on number of values being rendered.\n    // Someday, it would be better to include the actual rendered size.\n    // These values were emirically determined, trying to balance visibility\n    // and overlap across resolutions.\n    if (values.length < 5) {\n      thickness = 'xlarge';\n    } else if (values.length < 11) {\n      thickness = 'large';\n    } else if (values.length < 21) {\n      thickness = 'medium';\n    } else if (values.length < 61) {\n      thickness = 'small';\n    } else if (values.length < 121) {\n      thickness = 'xsmall';\n    } else {\n      thickness = 'hair';\n    }\n  }\n  var pad = thicknessPad[thickness];\n  return {\n    axis: [xAxis, yAxis],\n    bounds: bounds,\n    dimensions: dimensions,\n    pad: pad,\n    thickness: thickness\n  };\n};"],"mappings":"AAAA,SAASA,eAAe,QAAQ,SAAS;AACzC,IAAIC,YAAY,GAAG;EACjBC,MAAM,EAAE,OAAO;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,OAAO;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE;AACV,CAAC;AACD,OAAO,IAAIC,KAAK,GAAG,SAASA,KAAK,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACjD,OAAOC,MAAM,CAACC,IAAI,CAACJ,KAAK,CAACC,KAAK,GAAG,GAAG,GAAGC,QAAQ,CAAC,GAAG,IAAI,GAAGA,QAAQ,CAAC;AACrE,CAAC;AACD,IAAIG,QAAQ,GAAG,SAASA,QAAQ,CAACJ,KAAK,EAAEK,QAAQ,EAAE;EAChD,IAAIL,KAAK,GAAG,CAAC,EAAE,OAAOA,KAAK,GAAGA,KAAK,GAAGK,QAAQ,GAAGA,QAAQ;EACzD,IAAIL,KAAK,GAAG,CAAC,EAAE,OAAOA,KAAK,GAAGA,KAAK,GAAGK,QAAQ;EAC9C,OAAOL,KAAK;AACd,CAAC;AACD,IAAIM,QAAQ,GAAG,SAASA,QAAQ,CAACN,KAAK,EAAEK,QAAQ,EAAE;EAChD,IAAIL,KAAK,GAAG,CAAC,EAAE,OAAOA,KAAK,GAAGA,KAAK,GAAGK,QAAQ;EAC9C,IAAIL,KAAK,GAAG,CAAC,EAAE,OAAOA,KAAK,GAAGA,KAAK,GAAGK,QAAQ,GAAGA,QAAQ;EACzD,OAAOL,KAAK;AACd,CAAC;AACD,OAAO,IAAIO,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAEC,OAAO,EAAE;EAC3D,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC,CAAC;EACd;EACA;EACA;EACA;EACA,IAAIC,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACH,OAAO,CAACC,UAAU,CAAC,IAAID,OAAO,CAACC,UAAU,IAAID,OAAO,CAACC,UAAU,IAAI,CAACG,SAAS,EAAEJ,OAAO,CAACC,UAAU,CAAC,IAAI,CAACG,SAAS,EAAE,CAAC,CAAC;EACnJ,IAAIC,OAAO,GAAGJ,UAAU,CAAC,CAAC,CAAC;IACzBK,OAAO,GAAGL,UAAU,CAAC,CAAC,CAAC;EACzB;EACA,IAAIM,KAAK,GAAGP,OAAO,CAACO,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EACnC,IAAIC,MAAM,GAAGD,KAAK,CAAC,CAAC,CAAC;EACrB,IAAIE,UAAU,GAAG1B,eAAe,CAACgB,MAAM,IAAI,EAAE,CAAC;;EAE9C;EACA,IAAIW,IAAI;EACR,IAAIC,IAAI;EACR,IAAIC,IAAI;EACR,IAAIC,IAAI;EACR,IAAIJ,UAAU,CAACK,MAAM,EAAE;IACrB;IACAL,UAAU,CAACM,MAAM,CAAC,UAAUxB,KAAK,EAAE;MACjC,OAAOA,KAAK,KAAKa,SAAS;IAC5B,CAAC,CAAC,CAACY,OAAO,CAAC,UAAUzB,KAAK,EAAE;MAC1B,IAAI0B,CAAC,GAAG1B,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MACtB,IAAI0B,CAAC,KAAKb,SAAS,EAAE;QACnBM,IAAI,GAAGA,IAAI,KAAKN,SAAS,GAAGa,CAAC,GAAGvB,IAAI,CAACwB,GAAG,CAACR,IAAI,EAAEO,CAAC,CAAC;QACjDN,IAAI,GAAGA,IAAI,KAAKP,SAAS,GAAGa,CAAC,GAAGvB,IAAI,CAACyB,GAAG,CAACR,IAAI,EAAEM,CAAC,CAAC;MACnD;MACA,IAAIG,CAAC,GAAG7B,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MACtB,IAAI6B,CAAC,KAAKhB,SAAS,EAAE;QACnBQ,IAAI,GAAGA,IAAI,KAAKR,SAAS,GAAGgB,CAAC,GAAG1B,IAAI,CAACwB,GAAG,CAACN,IAAI,EAAEQ,CAAC,CAAC;QACjDP,IAAI,GAAGA,IAAI,KAAKT,SAAS,GAAGgB,CAAC,GAAG1B,IAAI,CAACyB,GAAG,CAACN,IAAI,EAAEO,CAAC,CAAC;MACnD;MACA;MACA,IAAIC,EAAE,GAAG9B,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MACvB,IAAI8B,EAAE,KAAKjB,SAAS,EAAE;QACpBQ,IAAI,GAAGlB,IAAI,CAACwB,GAAG,CAACN,IAAI,EAAES,EAAE,CAAC;QACzBR,IAAI,GAAGnB,IAAI,CAACyB,GAAG,CAACN,IAAI,EAAEQ,EAAE,CAAC;MAC3B;IACF,CAAC,CAAC;;IAEF;IACA,IAAIV,IAAI,KAAKD,IAAI,EAAE;MACjB,IAAIC,IAAI,GAAG,CAAC,EAAED,IAAI,GAAGC,IAAI,GAAG,CAAC,CAAC,KAAKA,IAAI,GAAGD,IAAI,GAAG,CAAC;IACpD;IACA,IAAIG,IAAI,KAAKD,IAAI,EAAE;MACjB,IAAIC,IAAI,GAAG,CAAC,EAAED,IAAI,GAAGC,IAAI,GAAG,CAAC,CAAC,KAAKA,IAAI,GAAGD,IAAI,GAAG,CAAC;IACpD;;IAEA;IACA;IACA;IACA,IAAIP,OAAO,EAAE;MACX,IAAIiB,MAAM,GAAGX,IAAI,GAAGD,IAAI;MACxB,IAAIa,SAAS,GAAG9B,MAAM,CAAC+B,UAAU,CAAC,CAACF,MAAM,GAAGjB,OAAO,EAAEoB,WAAW,CAAC,CAAC,CAAC,CAAC;MACpEf,IAAI,GAAGb,QAAQ,CAACa,IAAI,EAAEa,SAAS,CAAC;MAChCZ,IAAI,GAAGhB,QAAQ,CAACgB,IAAI,EAAEY,SAAS,CAAC;IAClC;IACA,IAAIjB,OAAO,EAAE;MACX,IAAIoB,MAAM,GAAGb,IAAI,GAAGD,IAAI;MACxB,IAAIe,SAAS,GAAGlC,MAAM,CAAC+B,UAAU,CAAC,CAACE,MAAM,GAAGpB,OAAO,EAAEmB,WAAW,CAAC,CAAC,CAAC,CAAC;MACpEb,IAAI,GAAGf,QAAQ,CAACe,IAAI,EAAEe,SAAS,CAAC;MAChCd,IAAI,GAAGlB,QAAQ,CAACkB,IAAI,EAAEc,SAAS,CAAC;IAClC;IACA,IAAIf,IAAI,GAAG,CAAC,IAAIC,IAAI,GAAG,CAAC,IAAInB,IAAI,CAACkC,GAAG,CAAChB,IAAI,CAAC,KAAKlB,IAAI,CAACkC,GAAG,CAACf,IAAI,CAAC,EAAE;MAC7D;MACA;MACA,IAAIL,MAAM,KAAK,CAAC,EAAE;QAChB,IAAIqB,OAAO,GAAGnC,IAAI,CAACyB,GAAG,CAACzB,IAAI,CAACkC,GAAG,CAAChB,IAAI,CAAC,EAAElB,IAAI,CAACkC,GAAG,CAACf,IAAI,CAAC,CAAC;QACtDD,IAAI,GAAG,CAACiB,OAAO;QACfhB,IAAI,GAAGgB,OAAO;MAChB,CAAC,MAAM;QACL,IAAIC,YAAY,GAAG,CAACjB,IAAI,GAAGD,IAAI,IAAIJ,MAAM;QACzC,IAAIuB,QAAQ,GAAGnB,IAAI,GAAGkB,YAAY;QAClC,IAAIE,QAAQ,GAAGnB,IAAI,GAAGiB,YAAY;QAClC,IAAIpC,IAAI,CAACkC,GAAG,CAACG,QAAQ,CAAC,GAAGrC,IAAI,CAACkC,GAAG,CAACI,QAAQ,CAAC,EAAE;UAC3C;UACAF,YAAY,GAAGjB,IAAI,GAAGnB,IAAI,CAACuC,KAAK,CAACD,QAAQ,CAAC;UAC1CnB,IAAI,GAAGiB,YAAY,GAAGpC,IAAI,CAACuC,KAAK,CAACD,QAAQ,CAAC;UAC1CpB,IAAI,GAAGkB,YAAY,GAAGpC,IAAI,CAACuC,KAAK,CAACF,QAAQ,CAAC;QAC5C,CAAC,MAAM;UACL;UACAD,YAAY,GAAGpC,IAAI,CAACkC,GAAG,CAAChB,IAAI,GAAGlB,IAAI,CAACwC,IAAI,CAACH,QAAQ,CAAC,CAAC;UACnDnB,IAAI,GAAGkB,YAAY,GAAGpC,IAAI,CAACwC,IAAI,CAACH,QAAQ,CAAC;UACzClB,IAAI,GAAGiB,YAAY,GAAGpC,IAAI,CAACwC,IAAI,CAACF,QAAQ,CAAC;QAC3C;MACF;IACF;EACF;EACA,IAAIG,MAAM;EACV,IAAI1B,UAAU,CAACK,MAAM,EAAEqB,MAAM,GAAG,CAAC,CAACzB,IAAI,EAAEC,IAAI,CAAC,EAAE,CAACC,IAAI,EAAEC,IAAI,CAAC,CAAC,CAAC,KAAKsB,MAAM,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EACnF,OAAOA,MAAM;AACf,CAAC;AACD,OAAO,IAAIC,KAAK,GAAG,SAASA,KAAK,CAACrC,MAAM,EAAEC,OAAO,EAAE;EACjD,IAAID,MAAM,KAAK,KAAK,CAAC,EAAE;IACrBA,MAAM,GAAG,EAAE;EACb;EACA,IAAIC,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC,CAAC;EACd;EACA;EACA,IAAIO,KAAK,GAAGP,OAAO,CAACO,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EACnC,IAAI8B,MAAM,GAAG9B,KAAK,CAAC,CAAC,CAAC;IACnBC,MAAM,GAAGD,KAAK,CAAC,CAAC,CAAC;EACnB,IAAI4B,MAAM,GAAGnC,OAAO,CAACmC,MAAM,IAAIrC,UAAU,CAACC,MAAM,EAAEC,OAAO,CAAC;EAC1D,IAAIA,OAAO,CAACkB,GAAG,KAAKd,SAAS,EAAE+B,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGnC,OAAO,CAACkB,GAAG;EACzD,IAAIlB,OAAO,CAACmB,GAAG,KAAKf,SAAS,EAAE+B,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGnC,OAAO,CAACmB,GAAG;EACzD,IAAImB,OAAO,GAAGH,MAAM,CAAC,CAAC,CAAC;IACrBI,OAAO,GAAGJ,MAAM,CAAC,CAAC,CAAC;EACrB,IAAIK,UAAU,GAAGF,OAAO,CAAC,CAAC,CAAC;IACzBG,UAAU,GAAGH,OAAO,CAAC,CAAC,CAAC;EACzB,IAAII,UAAU,GAAGH,OAAO,CAAC,CAAC,CAAC;IACzBI,UAAU,GAAGJ,OAAO,CAAC,CAAC,CAAC;EACzB,IAAIK,UAAU,GAAG,CAACtD,KAAK,CAACmD,UAAU,GAAGD,UAAU,EAAE,CAAC,CAAC,EAAElD,KAAK,CAACqD,UAAU,GAAGD,UAAU,EAAE,CAAC,CAAC,CAAC;EACvF,IAAIG,WAAW,GAAGD,UAAU,CAAC,CAAC,CAAC;IAC7BE,WAAW,GAAGF,UAAU,CAAC,CAAC,CAAC;;EAE7B;EACA,IAAIG,KAAK,GAAG,EAAE;EACd,IAAI3B,CAAC,GAAGuB,UAAU;EAClB;EACA;EACA,IAAIK,aAAa,GAAG1D,KAAK,CAACwD,WAAW,GAAGtC,MAAM,EAAE,CAAC,CAAC;EAClD,OAAOlB,KAAK,CAAC8B,CAAC,EAAE,CAAC,CAAC,IAAIsB,UAAU,EAAE;IAChCK,KAAK,CAACE,IAAI,CAAC3D,KAAK,CAAC8B,CAAC,EAAE,CAAC,CAAC,CAAC;IACvBA,CAAC,IAAI4B,aAAa;EACpB;EACA,IAAIE,KAAK,GAAG,EAAE;EACd,IAAIjC,CAAC,GAAGuB,UAAU;EAClB,IAAIW,aAAa,GAAG7D,KAAK,CAACuD,WAAW,GAAGR,MAAM,EAAE,CAAC,CAAC;EAClD,OAAO/C,KAAK,CAAC2B,CAAC,EAAE,CAAC,CAAC,IAAIwB,UAAU,EAAE;IAChCS,KAAK,CAACD,IAAI,CAAC3D,KAAK,CAAC2B,CAAC,EAAE,CAAC,CAAC,CAAC;IACvBA,CAAC,IAAIkC,aAAa;EACpB;EACA,IAAIC,QAAQ,GAAGpD,OAAO;IACpBqD,SAAS,GAAGD,QAAQ,CAACC,SAAS;EAChC,IAAI,CAACA,SAAS,EAAE;IACd;IACA;IACA;IACA;IACA,IAAItD,MAAM,CAACe,MAAM,GAAG,CAAC,EAAE;MACrBuC,SAAS,GAAG,QAAQ;IACtB,CAAC,MAAM,IAAItD,MAAM,CAACe,MAAM,GAAG,EAAE,EAAE;MAC7BuC,SAAS,GAAG,OAAO;IACrB,CAAC,MAAM,IAAItD,MAAM,CAACe,MAAM,GAAG,EAAE,EAAE;MAC7BuC,SAAS,GAAG,QAAQ;IACtB,CAAC,MAAM,IAAItD,MAAM,CAACe,MAAM,GAAG,EAAE,EAAE;MAC7BuC,SAAS,GAAG,OAAO;IACrB,CAAC,MAAM,IAAItD,MAAM,CAACe,MAAM,GAAG,GAAG,EAAE;MAC9BuC,SAAS,GAAG,QAAQ;IACtB,CAAC,MAAM;MACLA,SAAS,GAAG,MAAM;IACpB;EACF;EACA,IAAIC,GAAG,GAAGtE,YAAY,CAACqE,SAAS,CAAC;EACjC,OAAO;IACLE,IAAI,EAAE,CAACL,KAAK,EAAEH,KAAK,CAAC;IACpBZ,MAAM,EAAEA,MAAM;IACdS,UAAU,EAAEA,UAAU;IACtBU,GAAG,EAAEA,GAAG;IACRD,SAAS,EAAEA;EACb,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}