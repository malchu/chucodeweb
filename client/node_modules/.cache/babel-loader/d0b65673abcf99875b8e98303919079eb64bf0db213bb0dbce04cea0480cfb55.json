{"ast":null,"code":"import React, { forwardRef, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { round } from '../Chart';\nimport { doublePad } from './utils';\nvar YAxis = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var values = _ref.values,\n    pad = _ref.pad,\n    renderValue = _ref.renderValue,\n    _ref$serie = _ref.serie,\n    serie = _ref$serie === void 0 ? {} : _ref$serie;\n  var theme = useContext(ThemeContext);\n  var render = serie.render,\n    suffix = serie.suffix;\n  var divideBy;\n  var unit;\n  if (!render && !suffix) {\n    // figure out how many digits to show\n    var maxValue = Math.max.apply(Math, values.map(function (v) {\n      return Math.abs(v);\n    }));\n    if (maxValue > 10000000) {\n      divideBy = 1000000;\n      unit = 'M';\n    } else if (maxValue > 10000) {\n      divideBy = 1000;\n      unit = 'K';\n    }\n  }\n\n  // Set basis to match double the vertical pad, so we can align the\n  // text with the guides\n  var edgeSize = doublePad[pad.vertical || pad];\n  var basis = theme.global.edgeSize[edgeSize] || edgeSize;\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref,\n    gridArea: \"yAxis\",\n    justify: \"between\",\n    flex: true\n  }, values.map(function (axisValue, i) {\n    var content = renderValue(serie, undefined, axisValue);\n    if (content === axisValue) {\n      if (divideBy) content = round(content / divideBy, 0);\n      if (unit) content = \"\" + content + unit;\n    }\n    return /*#__PURE__*/React.createElement(Box\n    // eslint-disable-next-line react/no-array-index-key\n    , {\n      key: i,\n      align: \"end\",\n      basis: basis,\n      flex: \"shrink\",\n      justify: basis ? 'center' : undefined\n    }, content);\n  }));\n});\nexport { YAxis };","map":{"version":3,"names":["React","forwardRef","useContext","ThemeContext","Box","round","doublePad","YAxis","_ref","ref","values","pad","renderValue","_ref$serie","serie","theme","render","suffix","divideBy","unit","maxValue","Math","max","apply","map","v","abs","edgeSize","vertical","basis","global","createElement","gridArea","justify","flex","axisValue","i","content","undefined","key","align"],"sources":["C:/Users/malch/OneDrive/Documents/Projects/chucode/node_modules/grommet/es6/components/DataChart/YAxis.js"],"sourcesContent":["import React, { forwardRef, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { round } from '../Chart';\nimport { doublePad } from './utils';\nvar YAxis = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var values = _ref.values,\n    pad = _ref.pad,\n    renderValue = _ref.renderValue,\n    _ref$serie = _ref.serie,\n    serie = _ref$serie === void 0 ? {} : _ref$serie;\n  var theme = useContext(ThemeContext);\n  var render = serie.render,\n    suffix = serie.suffix;\n  var divideBy;\n  var unit;\n  if (!render && !suffix) {\n    // figure out how many digits to show\n    var maxValue = Math.max.apply(Math, values.map(function (v) {\n      return Math.abs(v);\n    }));\n    if (maxValue > 10000000) {\n      divideBy = 1000000;\n      unit = 'M';\n    } else if (maxValue > 10000) {\n      divideBy = 1000;\n      unit = 'K';\n    }\n  }\n\n  // Set basis to match double the vertical pad, so we can align the\n  // text with the guides\n  var edgeSize = doublePad[pad.vertical || pad];\n  var basis = theme.global.edgeSize[edgeSize] || edgeSize;\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref,\n    gridArea: \"yAxis\",\n    justify: \"between\",\n    flex: true\n  }, values.map(function (axisValue, i) {\n    var content = renderValue(serie, undefined, axisValue);\n    if (content === axisValue) {\n      if (divideBy) content = round(content / divideBy, 0);\n      if (unit) content = \"\" + content + unit;\n    }\n    return /*#__PURE__*/React.createElement(Box\n    // eslint-disable-next-line react/no-array-index-key\n    , {\n      key: i,\n      align: \"end\",\n      basis: basis,\n      flex: \"shrink\",\n      justify: basis ? 'center' : undefined\n    }, content);\n  }));\n});\nexport { YAxis };"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,UAAU,QAAQ,OAAO;AACrD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,GAAG,QAAQ,QAAQ;AAC5B,SAASC,KAAK,QAAQ,UAAU;AAChC,SAASC,SAAS,QAAQ,SAAS;AACnC,IAAIC,KAAK,GAAG,aAAaN,UAAU,CAAC,UAAUO,IAAI,EAAEC,GAAG,EAAE;EACvD,IAAIC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACtBC,GAAG,GAAGH,IAAI,CAACG,GAAG;IACdC,WAAW,GAAGJ,IAAI,CAACI,WAAW;IAC9BC,UAAU,GAAGL,IAAI,CAACM,KAAK;IACvBA,KAAK,GAAGD,UAAU,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,UAAU;EACjD,IAAIE,KAAK,GAAGb,UAAU,CAACC,YAAY,CAAC;EACpC,IAAIa,MAAM,GAAGF,KAAK,CAACE,MAAM;IACvBC,MAAM,GAAGH,KAAK,CAACG,MAAM;EACvB,IAAIC,QAAQ;EACZ,IAAIC,IAAI;EACR,IAAI,CAACH,MAAM,IAAI,CAACC,MAAM,EAAE;IACtB;IACA,IAAIG,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACC,KAAK,CAACF,IAAI,EAAEX,MAAM,CAACc,GAAG,CAAC,UAAUC,CAAC,EAAE;MAC1D,OAAOJ,IAAI,CAACK,GAAG,CAACD,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;IACH,IAAIL,QAAQ,GAAG,QAAQ,EAAE;MACvBF,QAAQ,GAAG,OAAO;MAClBC,IAAI,GAAG,GAAG;IACZ,CAAC,MAAM,IAAIC,QAAQ,GAAG,KAAK,EAAE;MAC3BF,QAAQ,GAAG,IAAI;MACfC,IAAI,GAAG,GAAG;IACZ;EACF;;EAEA;EACA;EACA,IAAIQ,QAAQ,GAAGrB,SAAS,CAACK,GAAG,CAACiB,QAAQ,IAAIjB,GAAG,CAAC;EAC7C,IAAIkB,KAAK,GAAGd,KAAK,CAACe,MAAM,CAACH,QAAQ,CAACA,QAAQ,CAAC,IAAIA,QAAQ;EACvD,OAAO,aAAa3B,KAAK,CAAC+B,aAAa,CAAC3B,GAAG,EAAE;IAC3CK,GAAG,EAAEA,GAAG;IACRuB,QAAQ,EAAE,OAAO;IACjBC,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE;EACR,CAAC,EAAExB,MAAM,CAACc,GAAG,CAAC,UAAUW,SAAS,EAAEC,CAAC,EAAE;IACpC,IAAIC,OAAO,GAAGzB,WAAW,CAACE,KAAK,EAAEwB,SAAS,EAAEH,SAAS,CAAC;IACtD,IAAIE,OAAO,KAAKF,SAAS,EAAE;MACzB,IAAIjB,QAAQ,EAAEmB,OAAO,GAAGhC,KAAK,CAACgC,OAAO,GAAGnB,QAAQ,EAAE,CAAC,CAAC;MACpD,IAAIC,IAAI,EAAEkB,OAAO,GAAG,EAAE,GAAGA,OAAO,GAAGlB,IAAI;IACzC;IACA,OAAO,aAAanB,KAAK,CAAC+B,aAAa,CAAC3B;IACxC;IAAA,EACE;MACAmC,GAAG,EAAEH,CAAC;MACNI,KAAK,EAAE,KAAK;MACZX,KAAK,EAAEA,KAAK;MACZK,IAAI,EAAE,QAAQ;MACdD,OAAO,EAAEJ,KAAK,GAAG,QAAQ,GAAGS;IAC9B,CAAC,EAAED,OAAO,CAAC;EACb,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AACF,SAAS9B,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}