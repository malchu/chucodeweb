{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\malch\\\\OneDrive\\\\Documents\\\\Projects\\\\ChuCode\\\\client\\\\src\\\\Pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { Bar } from 'react-chartjs-2';\nimport { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend);\nexport const options = {\n  plugins: {\n    title: {\n      display: true,\n      text: 'LeetCode Category Summary'\n    }\n  },\n  responsive: true,\n  scales: {\n    x: {\n      stacked: true\n    },\n    y: {\n      stacked: true\n    }\n  }\n};\nconst labels = ['Arrays & Hashing', 'Two Pointers', 'Sliding Window', 'Stack', 'Binary Search', 'Linked List'];\nexport function Dashboard() {\n  _s();\n  // Fields\n  const [listOfProblems, setListOfProblems] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [difficulty, setDifficulty] = useState(\"\");\n  const [duration, setDuration] = useState(0);\n  const [attempts, setAttempts] = useState(\"\");\n\n  // retrieve data from MongoDB\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/getProblems\").then(response => {\n      setListOfProblems(response.data);\n    });\n  }, []);\n\n  // functions\n  const createProblem = () => {\n    Axios.post(\"http://localhost:3001/createProblem\", {\n      name,\n      difficulty,\n      duration,\n      attempts\n    }).then(response => {\n      setListOfProblems([...listOfProblems, {\n        name,\n        difficulty,\n        duration,\n        attempts\n      }]);\n    });\n  };\n  var easy = [];\n  var med = [];\n  var hard = [];\n  {\n    listOfProblems.map(problem => {\n      if (problem.difficulty == \"Easy\") {\n        easy.push(problem);\n      } else if (problem.difficulty == \"Medium\") {\n        med.push(problem);\n      } else {\n        hard.push(problem);\n      }\n    });\n  }\n  ;\n  var easyhash = {};\n  easy.forEach(problem => {\n    if (problem.attempts in easyhash) {\n      easyhash[problem.attempts] += 1;\n    } else {\n      easyhash[problem.attempts] = 1;\n    }\n  });\n  var medHash = {};\n  med.forEach(problem => {\n    if (problem.attempts in medHash) {\n      medHash[problem.attempts] += 1;\n    } else {\n      medHash[problem.attempts] = 1;\n    }\n  });\n  var hardHash = {};\n  hard.forEach(problem => {\n    if (problem.attempts in hardHash) {\n      hardHash[problem.attempts] += 1;\n    } else {\n      hardHash[problem.attempts] = 1;\n    }\n  });\n  const data = {\n    labels,\n    datasets: [{\n      label: 'Easy',\n      data: labels.map(label => easyhash[label]),\n      backgroundColor: 'rgb(0, 255, 136)'\n    }, {\n      label: 'Medium',\n      data: labels.map(label => medHash[label]),\n      backgroundColor: 'rgb(231, 168, 50)'\n    }, {\n      label: 'Hard',\n      data: labels.map(label => hardHash[label]),\n      backgroundColor: 'red'\n    }]\n  };\n\n  //Doughnut graph\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chart\",\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 26\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 10\n  }, this);\n}\n_s(Dashboard, \"fYEm62cqNlBmv8SIFqSIwSPqIvY=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","Chart","ChartJS","CategoryScale","LinearScale","BarElement","ArcElement","Title","Tooltip","Legend","Doughnut","Bar","useState","useEffect","Axios","register","options","plugins","title","display","text","responsive","scales","x","stacked","y","labels","Dashboard","listOfProblems","setListOfProblems","name","setName","difficulty","setDifficulty","duration","setDuration","attempts","setAttempts","get","then","response","data","createProblem","post","easy","med","hard","map","problem","push","easyhash","forEach","medHash","hardHash","datasets","label","backgroundColor"],"sources":["C:/Users/malch/OneDrive/Documents/Projects/ChuCode/client/src/Pages/Dashboard.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport const options = {\r\n  plugins: {\r\n    title: {\r\n      display: true,\r\n      text: 'LeetCode Category Summary',\r\n    },\r\n  },\r\n  responsive: true,\r\n  scales: {\r\n    x: {\r\n      stacked: true,\r\n    },\r\n    y: {\r\n      stacked: true,\r\n    },\r\n  },\r\n};\r\n\r\nconst labels = ['Arrays & Hashing', 'Two Pointers', 'Sliding Window', 'Stack', 'Binary Search', 'Linked List'];\r\n\r\nexport function Dashboard() {\r\n  // Fields\r\n  const [listOfProblems, setListOfProblems] = useState([])\r\n  const [name, setName] = useState(\"\")\r\n  const [difficulty, setDifficulty] = useState(\"\")\r\n  const [duration, setDuration] = useState(0)\r\n  const [attempts, setAttempts] = useState(\"\") \r\n\r\n  // retrieve data from MongoDB\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/getProblems\").then((response) => {\r\n      setListOfProblems(response.data)\r\n    });\r\n  }, [])\r\n\r\n  // functions\r\n  const createProblem = () => {\r\n    Axios.post(\"http://localhost:3001/createProblem\", {\r\n      name, \r\n      difficulty,\r\n      duration,\r\n      attempts,\r\n    }).then((response) => {\r\n      setListOfProblems([...listOfProblems, {\r\n        name, \r\n        difficulty,\r\n        duration,\r\n        attempts,\r\n      }])\r\n    })\r\n  }\r\n\r\n\r\n  var easy = [];\r\n  var med = [];\r\n  var hard = [];\r\n  {listOfProblems.map((problem) => {\r\n    if (problem.difficulty == \"Easy\") {\r\n      easy.push(problem);\r\n    } else if (problem.difficulty == \"Medium\") {\r\n      med.push(problem);\r\n    } else {\r\n      hard.push(problem);\r\n    }\r\n  })};\r\n\r\n  var easyhash = {};\r\n  easy.forEach((problem) => {\r\n    if (problem.attempts in easyhash) {\r\n      easyhash[problem.attempts] += 1;\r\n    } else {\r\n      easyhash[problem.attempts] = 1;\r\n    }\r\n  });\r\n\r\n  var medHash = {};\r\n  med.forEach((problem) => {\r\n    if (problem.attempts in medHash) {\r\n      medHash[problem.attempts] += 1;\r\n    } else {\r\n      medHash[problem.attempts] = 1;\r\n    }\r\n  });\r\n\r\n  var hardHash = {};\r\n  hard.forEach((problem) => {\r\n    if (problem.attempts in hardHash) {\r\n      hardHash[problem.attempts] += 1;\r\n    } else {\r\n      hardHash[problem.attempts] = 1;\r\n    }\r\n  });\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: 'Easy',\r\n        data: labels.map((label) => easyhash[label]),\r\n        backgroundColor: 'rgb(0, 255, 136)',\r\n      },\r\n      {\r\n        label: 'Medium',\r\n        data: labels.map((label) => medHash[label]),\r\n        backgroundColor: 'rgb(231, 168, 50)',\r\n      },\r\n      {\r\n        label: 'Hard',\r\n        data: labels.map((label) => hardHash[label]),\r\n        backgroundColor: 'red',\r\n      },\r\n    ],\r\n  };\r\n\r\n\r\n  //Doughnut graph\r\n  \r\n\r\n  return <div id='chart'><Bar options={options} data={data} /></div>;\r\n}\r\n\r\nexport default Dashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}