{"ast":null,"code":"import * as t from \"react\";\nfunction e() {\n  return (e = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);\n    }\n    return t;\n  }).apply(this, arguments);\n}\nconst n = [\"children\", \"options\"],\n  r = [\"allowFullScreen\", \"allowTransparency\", \"autoComplete\", \"autoFocus\", \"autoPlay\", \"cellPadding\", \"cellSpacing\", \"charSet\", \"className\", \"classId\", \"colSpan\", \"contentEditable\", \"contextMenu\", \"crossOrigin\", \"encType\", \"formAction\", \"formEncType\", \"formMethod\", \"formNoValidate\", \"formTarget\", \"frameBorder\", \"hrefLang\", \"inputMode\", \"keyParams\", \"keyType\", \"marginHeight\", \"marginWidth\", \"maxLength\", \"mediaGroup\", \"minLength\", \"noValidate\", \"radioGroup\", \"readOnly\", \"rowSpan\", \"spellCheck\", \"srcDoc\", \"srcLang\", \"srcSet\", \"tabIndex\", \"useMap\"].reduce((t, e) => (t[e.toLowerCase()] = e, t), {\n    for: \"htmlFor\"\n  }),\n  o = {\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    nbsp: \" \",\n    quot: \"“\"\n  },\n  c = [\"style\", \"script\"],\n  a = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n  u = /mailto:/i,\n  i = /\\n{2,}$/,\n  l = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/,\n  s = /^ *> ?/gm,\n  _ = /^ {2,}\\n/,\n  f = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/,\n  d = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/,\n  p = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n  g = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  m = /^(?:\\n *)*\\n/,\n  y = /\\r\\n?/g,\n  h = /^\\[\\^([^\\]]+)](:.*)\\n/,\n  k = /^\\[\\^([^\\]]+)]/,\n  x = /\\f/g,\n  b = /^\\s*?\\[(x|\\s)\\]/,\n  v = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  S = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n  $ = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i,\n  w = /&([a-z]+);/g,\n  z = /^<!--[\\s\\S]*?(?:-->)/,\n  E = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n  A = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n  R = /^\\{.*\\}$/,\n  I = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  M = /^<([^ >]+@[^ >]+)>/,\n  O = /^<([^ >]+:\\/[^ >]+)>/,\n  B = / *\\n+$/,\n  L = /(?:^|\\n)( *)$/,\n  T = /-([a-z])?/gi,\n  j = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/,\n  C = /^\\[([^\\]]*)\\]:\\s+(\\S+)\\s*(\"([^\"]*)\")?/,\n  D = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  N = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  Z = /(\\[|\\])/g,\n  F = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n  P = /\\t/g,\n  G = /^ *\\| */,\n  H = /(^ *\\||\\| *$)/g,\n  q = / *$/,\n  U = /^ *:-+: *$/,\n  V = /^ *:-+ *$/,\n  W = /^ *-+: *$/,\n  Q = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/,\n  X = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/,\n  J = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,\n  K = /^\\\\([^0-9A-Za-z\\s])/,\n  Y = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n  tt = /^\\n+/,\n  et = /^([ \\t]*)/,\n  nt = /\\\\([^0-9A-Z\\s])/gi,\n  rt = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) +\"),\n  ot = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) +[^\\\\n]*(?:\\\\n(?!\\\\1(?:[*+-]|\\\\d+\\\\.) )[^\\\\n]*)*(\\\\n|$)\", \"gm\"),\n  ct = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1(?:[*+-]|\\\\d+\\\\.) (?!(?:[*+-]|\\\\d+\\\\.) ))\\\\n*|\\\\s*\\\\n*$)\"),\n  at = \"(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*\",\n  ut = new RegExp(\"^\\\\[(\" + at + \")\\\\]\\\\(\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n  it = new RegExp(\"^!\\\\[(\" + at + \")\\\\]\\\\(\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n  lt = [l, p, d, v, S, z, ot, ct, j],\n  st = [...lt, /^[^\\n]+(?:  \\n|\\n{2,})/, $, A];\nfunction _t(t) {\n  return t.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\nfunction ft(t) {\n  return W.test(t) ? \"right\" : U.test(t) ? \"center\" : V.test(t) ? \"left\" : null;\n}\nfunction dt(t, e, n) {\n  const r = n.t;\n  n.t = !0;\n  const o = e(t.trim(), n);\n  n.t = r;\n  let c = [[]];\n  return o.forEach(function (t, e) {\n    \"tableSeparator\" === t.type ? 0 !== e && e !== o.length - 1 && c.push([]) : (\"text\" !== t.type || null != o[e + 1] && \"tableSeparator\" !== o[e + 1].type || (t.content = t.content.replace(q, \"\")), c[c.length - 1].push(t));\n  }), c;\n}\nfunction pt(t, e, n) {\n  n.o = !0;\n  const r = dt(t[1], e, n),\n    o = t[2].replace(H, \"\").split(\"|\").map(ft),\n    c = function (t, e, n) {\n      return t.trim().split(\"\\n\").map(function (t) {\n        return dt(t, e, n);\n      });\n    }(t[3], e, n);\n  return n.o = !1, {\n    align: o,\n    cells: c,\n    header: r,\n    type: \"table\"\n  };\n}\nfunction gt(t, e) {\n  return null == t.align[e] ? {} : {\n    textAlign: t.align[e]\n  };\n}\nfunction mt(t) {\n  return function (e, n) {\n    return n.o ? t.exec(e) : null;\n  };\n}\nfunction yt(t) {\n  return function (e, n) {\n    return n.o || n.u ? t.exec(e) : null;\n  };\n}\nfunction ht(t) {\n  return function (e, n) {\n    return n.o || n.u ? null : t.exec(e);\n  };\n}\nfunction kt(t) {\n  return function (e) {\n    return t.exec(e);\n  };\n}\nfunction xt(t, e, n) {\n  if (e.o || e.u) return null;\n  if (n && !n.endsWith(\"\\n\")) return null;\n  let r = \"\";\n  t.split(\"\\n\").every(t => !lt.some(e => e.test(t)) && (r += t + \"\\n\", t.trim()));\n  const o = r.trimEnd();\n  return \"\" == o ? null : [r, o];\n}\nfunction bt(t) {\n  try {\n    if (decodeURIComponent(t).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data):/i)) return null;\n  } catch (t) {\n    return null;\n  }\n  return t;\n}\nfunction vt(t) {\n  return t.replace(nt, \"$1\");\n}\nfunction St(t, e, n) {\n  const r = n.o || !1,\n    o = n.u || !1;\n  n.o = !0, n.u = !0;\n  const c = t(e, n);\n  return n.o = r, n.u = o, c;\n}\nfunction $t(t, e, n) {\n  const r = n.o || !1,\n    o = n.u || !1;\n  n.o = !1, n.u = !0;\n  const c = t(e, n);\n  return n.o = r, n.u = o, c;\n}\nfunction wt(t, e, n) {\n  return n.o = !1, t(e + \"\\n\\n\", n);\n}\nconst zt = (t, e, n) => ({\n  content: St(e, t[1], n)\n});\nfunction Et() {\n  return {};\n}\nfunction At() {\n  return null;\n}\nfunction Rt() {\n  for (var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++) {\n    t[_key] = arguments[_key];\n  }\n  return t.filter(Boolean).join(\" \");\n}\nfunction It(t, e, n) {\n  let r = t;\n  const o = e.split(\".\");\n  for (; o.length && (r = r[o[0]], void 0 !== r);) o.shift();\n  return r || n;\n}\nvar Mt;\nfunction Ot(n) {\n  let H = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  H.overrides = H.overrides || {}, H.slugify = H.slugify || _t, H.namedCodesToUnicode = H.namedCodesToUnicode ? e({}, o, H.namedCodesToUnicode) : o;\n  const q = H.createElement || t.createElement;\n  function U(t, n) {\n    const o = It(H.overrides, `${t}.props`, {});\n    for (var _len2 = arguments.length, r = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      r[_key2 - 2] = arguments[_key2];\n    }\n    return q(function (t, e) {\n      const n = It(e, t);\n      return n ? \"function\" == typeof n || \"object\" == typeof n && \"render\" in n ? n : It(e, `${t}.component`, t) : t;\n    }(t, H.overrides), e({}, n, o, {\n      className: Rt(null == n ? void 0 : n.className, o.className) || void 0\n    }), ...r);\n  }\n  function V(e) {\n    let n = !1;\n    H.forceInline ? n = !0 : H.forceBlock || (n = !1 === F.test(e));\n    const r = dt(ft(n ? e : `${e.trimEnd().replace(tt, \"\")}\\n\\n`, {\n      o: n\n    }));\n    for (; \"string\" == typeof r[r.length - 1] && !r[r.length - 1].trim();) r.pop();\n    if (null === H.wrapper) return r;\n    const o = H.wrapper || (n ? \"span\" : \"div\");\n    let c;\n    if (r.length > 1 || H.forceWrapper) c = r;else {\n      if (1 === r.length) return c = r[0], \"string\" == typeof c ? U(\"span\", {\n        key: \"outer\"\n      }, c) : c;\n      c = null;\n    }\n    return t.createElement(o, {\n      key: \"outer\"\n    }, c);\n  }\n  function W(e) {\n    const n = e.match(a);\n    return n ? n.reduce(function (e, n, o) {\n      const c = n.indexOf(\"=\");\n      if (-1 !== c) {\n        const a = function (t) {\n            return -1 !== t.indexOf(\"-\") && null === t.match(E) && (t = t.replace(T, function (t, e) {\n              return e.toUpperCase();\n            })), t;\n          }(n.slice(0, c)).trim(),\n          u = function (t) {\n            const e = t[0];\n            return ('\"' === e || \"'\" === e) && t.length >= 2 && t[t.length - 1] === e ? t.slice(1, -1) : t;\n          }(n.slice(c + 1).trim()),\n          i = r[a] || a,\n          l = e[i] = function (t, e) {\n            return \"style\" === t ? e.split(/;\\s?/).reduce(function (t, e) {\n              const n = e.slice(0, e.indexOf(\":\"));\n              return t[n.replace(/(-[a-z])/g, t => t[1].toUpperCase())] = e.slice(n.length + 1).trim(), t;\n            }, {}) : \"href\" === t ? bt(e) : (e.match(R) && (e = e.slice(1, e.length - 1)), \"true\" === e || \"false\" !== e && e);\n          }(a, u);\n        \"string\" == typeof l && ($.test(l) || A.test(l)) && (e[i] = t.cloneElement(V(l.trim()), {\n          key: o\n        }));\n      } else \"style\" !== n && (e[r[n] || n] = !0);\n      return e;\n    }, {}) : void 0;\n  }\n  const nt = [],\n    at = {},\n    lt = {\n      blockQuote: {\n        i: ht(l),\n        l: Mt.HIGH,\n        _: (t, e, n) => ({\n          content: e(t[0].replace(s, \"\"), n)\n        }),\n        p: (t, e, n) => U(\"blockquote\", {\n          key: n.g\n        }, e(t.content, n))\n      },\n      breakLine: {\n        i: kt(_),\n        l: Mt.HIGH,\n        _: Et,\n        p: (t, e, n) => U(\"br\", {\n          key: n.g\n        })\n      },\n      breakThematic: {\n        i: ht(f),\n        l: Mt.HIGH,\n        _: Et,\n        p: (t, e, n) => U(\"hr\", {\n          key: n.g\n        })\n      },\n      codeBlock: {\n        i: ht(p),\n        l: Mt.MAX,\n        _: t => ({\n          content: t[0].replace(/^ {4}/gm, \"\").replace(/\\n+$/, \"\"),\n          lang: void 0\n        }),\n        p: (t, e, n) => U(\"pre\", {\n          key: n.g\n        }, U(\"code\", {\n          className: t.lang ? `lang-${t.lang}` : \"\"\n        }, t.content))\n      },\n      codeFenced: {\n        i: ht(d),\n        l: Mt.MAX,\n        _: t => ({\n          content: t[3],\n          lang: t[2] || void 0,\n          type: \"codeBlock\"\n        })\n      },\n      codeInline: {\n        i: yt(g),\n        l: Mt.LOW,\n        _: t => ({\n          content: t[2]\n        }),\n        p: (t, e, n) => U(\"code\", {\n          key: n.g\n        }, t.content)\n      },\n      footnote: {\n        i: ht(h),\n        l: Mt.MAX,\n        _: t => (nt.push({\n          footnote: t[2],\n          identifier: t[1]\n        }), {}),\n        p: At\n      },\n      footnoteReference: {\n        i: mt(k),\n        l: Mt.HIGH,\n        _: t => ({\n          content: t[1],\n          target: `#${H.slugify(t[1])}`\n        }),\n        p: (t, e, n) => U(\"a\", {\n          key: n.g,\n          href: bt(t.target)\n        }, U(\"sup\", {\n          key: n.g\n        }, t.content))\n      },\n      gfmTask: {\n        i: mt(b),\n        l: Mt.HIGH,\n        _: t => ({\n          completed: \"x\" === t[1].toLowerCase()\n        }),\n        p: (t, e, n) => U(\"input\", {\n          checked: t.completed,\n          key: n.g,\n          readOnly: !0,\n          type: \"checkbox\"\n        })\n      },\n      heading: {\n        i: ht(v),\n        l: Mt.HIGH,\n        _: (t, e, n) => ({\n          content: St(e, t[2], n),\n          id: H.slugify(t[2]),\n          level: t[1].length\n        }),\n        p: (t, e, n) => (t.tag = `h${t.level}`, U(t.tag, {\n          id: t.id,\n          key: n.g\n        }, e(t.content, n)))\n      },\n      headingSetext: {\n        i: ht(S),\n        l: Mt.MAX,\n        _: (t, e, n) => ({\n          content: St(e, t[1], n),\n          level: \"=\" === t[2] ? 1 : 2,\n          type: \"heading\"\n        })\n      },\n      htmlComment: {\n        i: kt(z),\n        l: Mt.HIGH,\n        _: () => ({}),\n        p: At\n      },\n      image: {\n        i: yt(it),\n        l: Mt.HIGH,\n        _: t => ({\n          alt: t[1],\n          target: vt(t[2]),\n          title: t[3]\n        }),\n        p: (t, e, n) => U(\"img\", {\n          key: n.g,\n          alt: t.alt || void 0,\n          title: t.title || void 0,\n          src: bt(t.target)\n        })\n      },\n      link: {\n        i: mt(ut),\n        l: Mt.LOW,\n        _: (t, e, n) => ({\n          content: $t(e, t[1], n),\n          target: vt(t[2]),\n          title: t[3]\n        }),\n        p: (t, e, n) => U(\"a\", {\n          key: n.g,\n          href: bt(t.target),\n          title: t.title\n        }, e(t.content, n))\n      },\n      linkAngleBraceStyleDetector: {\n        i: mt(O),\n        l: Mt.MAX,\n        _: t => ({\n          content: [{\n            content: t[1],\n            type: \"text\"\n          }],\n          target: t[1],\n          type: \"link\"\n        })\n      },\n      linkBareUrlDetector: {\n        i: (t, e) => e.m ? null : mt(I)(t, e),\n        l: Mt.MAX,\n        _: t => ({\n          content: [{\n            content: t[1],\n            type: \"text\"\n          }],\n          target: t[1],\n          title: void 0,\n          type: \"link\"\n        })\n      },\n      linkMailtoDetector: {\n        i: mt(M),\n        l: Mt.MAX,\n        _(t) {\n          let e = t[1],\n            n = t[1];\n          return u.test(n) || (n = \"mailto:\" + n), {\n            content: [{\n              content: e.replace(\"mailto:\", \"\"),\n              type: \"text\"\n            }],\n            target: n,\n            type: \"link\"\n          };\n        }\n      },\n      list: {\n        i(t, e, n) {\n          const r = L.exec(n);\n          return !r || !e.h && e.o ? null : ct.exec(t = r[1] + t);\n        },\n        l: Mt.HIGH,\n        _(t, e, n) {\n          const r = t[2],\n            o = r.length > 1,\n            c = o ? +r : void 0,\n            a = t[0].replace(i, \"\\n\").match(ot);\n          let u = !1;\n          return {\n            items: a.map(function (t, r) {\n              const o = rt.exec(t)[0].length,\n                c = new RegExp(\"^ {1,\" + o + \"}\", \"gm\"),\n                i = t.replace(c, \"\").replace(rt, \"\"),\n                l = r === a.length - 1,\n                s = -1 !== i.indexOf(\"\\n\\n\") || l && u;\n              u = s;\n              const _ = n.o,\n                f = n.h;\n              let d;\n              n.h = !0, s ? (n.o = !1, d = i.replace(B, \"\\n\\n\")) : (n.o = !0, d = i.replace(B, \"\"));\n              const p = e(d, n);\n              return n.o = _, n.h = f, p;\n            }),\n            ordered: o,\n            start: c\n          };\n        },\n        p: (t, e, n) => U(t.ordered ? \"ol\" : \"ul\", {\n          key: n.g,\n          start: t.start\n        }, t.items.map(function (t, r) {\n          return U(\"li\", {\n            key: r\n          }, e(t, n));\n        }))\n      },\n      newlineCoalescer: {\n        i: ht(m),\n        l: Mt.LOW,\n        _: Et,\n        p: () => \"\\n\"\n      },\n      paragraph: {\n        i: xt,\n        l: Mt.LOW,\n        _: zt,\n        p: (t, e, n) => U(\"p\", {\n          key: n.g\n        }, e(t.content, n))\n      },\n      ref: {\n        i: mt(C),\n        l: Mt.MAX,\n        _: t => (at[t[1]] = {\n          target: t[2],\n          title: t[4]\n        }, {}),\n        p: At\n      },\n      refImage: {\n        i: yt(D),\n        l: Mt.MAX,\n        _: t => ({\n          alt: t[1] || void 0,\n          ref: t[2]\n        }),\n        p: (t, e, n) => U(\"img\", {\n          key: n.g,\n          alt: t.alt,\n          src: bt(at[t.ref].target),\n          title: at[t.ref].title\n        })\n      },\n      refLink: {\n        i: mt(N),\n        l: Mt.MAX,\n        _: (t, e, n) => ({\n          content: e(t[1], n),\n          fallbackContent: e(t[0].replace(Z, \"\\\\$1\"), n),\n          ref: t[2]\n        }),\n        p: (t, e, n) => at[t.ref] ? U(\"a\", {\n          key: n.g,\n          href: bt(at[t.ref].target),\n          title: at[t.ref].title\n        }, e(t.content, n)) : U(\"span\", {\n          key: n.g\n        }, e(t.fallbackContent, n))\n      },\n      table: {\n        i: ht(j),\n        l: Mt.HIGH,\n        _: pt,\n        p: (t, e, n) => U(\"table\", {\n          key: n.g\n        }, U(\"thead\", null, U(\"tr\", null, t.header.map(function (r, o) {\n          return U(\"th\", {\n            key: o,\n            style: gt(t, o)\n          }, e(r, n));\n        }))), U(\"tbody\", null, t.cells.map(function (r, o) {\n          return U(\"tr\", {\n            key: o\n          }, r.map(function (r, o) {\n            return U(\"td\", {\n              key: o,\n              style: gt(t, o)\n            }, e(r, n));\n          }));\n        })))\n      },\n      tableSeparator: {\n        i: function (t, e) {\n          return e.t ? G.exec(t) : null;\n        },\n        l: Mt.HIGH,\n        _: function () {\n          return {\n            type: \"tableSeparator\"\n          };\n        },\n        p: () => \" | \"\n      },\n      text: {\n        i: kt(Y),\n        l: Mt.MIN,\n        _: t => ({\n          content: t[0].replace(w, (t, e) => H.namedCodesToUnicode[e] ? H.namedCodesToUnicode[e] : t)\n        }),\n        p: t => t.content\n      },\n      textBolded: {\n        i: yt(Q),\n        l: Mt.MED,\n        _: (t, e, n) => ({\n          content: e(t[2], n)\n        }),\n        p: (t, e, n) => U(\"strong\", {\n          key: n.g\n        }, e(t.content, n))\n      },\n      textEmphasized: {\n        i: yt(X),\n        l: Mt.LOW,\n        _: (t, e, n) => ({\n          content: e(t[2], n)\n        }),\n        p: (t, e, n) => U(\"em\", {\n          key: n.g\n        }, e(t.content, n))\n      },\n      textEscaped: {\n        i: yt(K),\n        l: Mt.HIGH,\n        _: t => ({\n          content: t[1],\n          type: \"text\"\n        })\n      },\n      textStrikethroughed: {\n        i: yt(J),\n        l: Mt.LOW,\n        _: zt,\n        p: (t, e, n) => U(\"del\", {\n          key: n.g\n        }, e(t.content, n))\n      }\n    };\n  !0 !== H.disableParsingRawHTML && (lt.htmlBlock = {\n    i: kt($),\n    l: Mt.HIGH,\n    _(t, e, n) {\n      const [, r] = t[3].match(et),\n        o = new RegExp(`^${r}`, \"gm\"),\n        a = t[3].replace(o, \"\"),\n        u = (i = a, st.some(t => t.test(i)) ? wt : St);\n      var i;\n      const l = t[1].toLowerCase(),\n        s = -1 !== c.indexOf(l);\n      n.m = n.m || \"a\" === l;\n      const _ = s ? t[3] : u(e, a, n);\n      return n.m = !1, {\n        attrs: W(t[2]),\n        content: _,\n        noInnerParse: s,\n        tag: s ? l : t[1]\n      };\n    },\n    p: (t, n, r) => U(t.tag, e({\n      key: r.g\n    }, t.attrs), t.noInnerParse ? t.content : n(t.content, r))\n  }, lt.htmlSelfClosing = {\n    i: kt(A),\n    l: Mt.HIGH,\n    _: t => ({\n      attrs: W(t[2] || \"\"),\n      tag: t[1]\n    }),\n    p: (t, n, r) => U(t.tag, e({}, t.attrs, {\n      key: r.g\n    }))\n  });\n  const ft = function (t) {\n      let e = Object.keys(t);\n      function n(r, o) {\n        let c = [],\n          a = \"\";\n        for (; r;) {\n          let u = 0;\n          for (; u < e.length;) {\n            const i = e[u],\n              l = t[i],\n              s = l.i(r, o, a);\n            if (s) {\n              const t = s[0];\n              r = r.substring(t.length);\n              const e = l._(s, n, o);\n              null == e.type && (e.type = i), c.push(e), a = t;\n              break;\n            }\n            u++;\n          }\n        }\n        return c;\n      }\n      return e.sort(function (e, n) {\n        let r = t[e].l,\n          o = t[n].l;\n        return r !== o ? r - o : e < n ? -1 : 1;\n      }), function (t, e) {\n        return n(function (t) {\n          return t.replace(y, \"\\n\").replace(x, \"\").replace(P, \"    \");\n        }(t), e);\n      };\n    }(lt),\n    dt = (Ot = function (t) {\n      return function (e, n, r) {\n        return t[e.type].p(e, n, r);\n      };\n    }(lt), function t(e) {\n      let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (Array.isArray(e)) {\n        const r = n.g,\n          o = [];\n        let c = !1;\n        for (let r = 0; r < e.length; r++) {\n          n.g = r;\n          const a = t(e[r], n),\n            u = \"string\" == typeof a;\n          u && c ? o[o.length - 1] += a : null !== a && o.push(a), c = u;\n        }\n        return n.g = r, o;\n      }\n      return Ot(e, t, n);\n    });\n  var Ot;\n  const Bt = V(n);\n  return nt.length ? U(\"div\", null, Bt, U(\"footer\", {\n    key: \"footer\"\n  }, nt.map(function (t) {\n    return U(\"div\", {\n      id: H.slugify(t.identifier),\n      key: t.identifier\n    }, t.identifier, dt(ft(t.footnote, {\n      o: !0\n    })));\n  }))) : Bt;\n}\n!function (t) {\n  t[t.MAX = 0] = \"MAX\", t[t.HIGH = 1] = \"HIGH\", t[t.MED = 2] = \"MED\", t[t.LOW = 3] = \"LOW\", t[t.MIN = 4] = \"MIN\";\n}(Mt || (Mt = {}));\nexport default (e => {\n  let {\n      children: r,\n      options: o\n    } = e,\n    c = function (t, e) {\n      if (null == t) return {};\n      var n,\n        r,\n        o = {},\n        c = Object.keys(t);\n      for (r = 0; r < c.length; r++) e.indexOf(n = c[r]) >= 0 || (o[n] = t[n]);\n      return o;\n    }(e, n);\n  return t.cloneElement(Ot(r, o), c);\n});\nexport { Ot as compiler };","map":{"version":3,"mappings":"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","names":["ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_PREFIX_R","RegExp","LIST_ITEM_R","LIST_R","LINK_INSIDE","LINK_R","IMAGE_R","NON_PARAGRAPH_BLOCK_SYNTAXES","BLOCK_SYNTAXES","slugify","str","replace","parseTableAlignCapture","alignCapture","test","parseTableRow","source","parse","state","prevInTable","_inTable","tableRow","trim","cells","forEach","node","i","type","length","push","content","parseTable","capture","_inline","header","align","split","map","rowText","parseTableCells","getTableStyle","colIndex","textAlign","inlineRegex","regex","exec","simpleInlineRegex","_simple","blockRegex","anyScopeRegex","matchParagraph","prevCapturedString","endsWith","match","every","line","some","captured","trimEnd","sanitizeUrl","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","result","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","cx","args","filter","Boolean","join","get","src","path","fb","ptr","frags","undefined","shift","Priority","compiler","markdown","options","overrides","createElementFn","createElement","React","h","tag","props","children","overrideProps","override","getTag","className","compile","input","forceInline","forceBlock","arr","emitter","parser","pop","wrapper","jsx","forceWrapper","key","attrStringToMap","attributes","raw","index","delimiterIdx","indexOf","_","letter","toUpperCase","normalizeAttributeKey","slice","value","first","unquote","mappedKey","normalizedValue","styles","kvPair","substr","attributeValueToJSXPropValue","cloneElement","footnotes","refs","rules","blockQuote","_match","_order","HIGH","_parse","_react","output","_key","breakLine","__","breakThematic","codeBlock","MAX","lang","codeFenced","codeInline","LOW","footnote","identifier","footnoteReference","target","href","gfmTask","completed","checked","readOnly","heading","id","level","headingSetext","htmlComment","image","alt","title","link","linkAngleBraceStyleDetector","linkBareUrlDetector","_inAnchor","linkMailtoDetector","address","list","prevCapture","isStartOfLine","_list","bullet","ordered","start","items","lastItemWasAParagraph","item","space","spaceRegex","isLastItem","thisItemIsAParagraph","oldStateInline","oldStateList","adjustedContent","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","style","row","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textStrikethroughed","disableParsingRawHTML","htmlBlock","whitespace","trimmer","trimmed","parseFunc","r","tagName","noInnerParse","attrs","htmlSelfClosing","ruleList","Object","keys","nestedParse","ruleType","rule","currCaptureString","substring","parsed","sort","typeA","typeB","orderA","orderB","normalizeWhitespace","parserFor","outputFunc","ast","ruleOutput","nestedReactOutput","Array","isArray","oldKey","lastWasString","nodeOut","isString","def","_ref"],"sources":["C:\\Users\\malch\\OneDrive\\Documents\\Projects\\chucode\\node_modules\\markdown-to-jsx\\index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.Props<any>,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entites are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce((obj, x) => ((obj[x.toLowerCase()] = x), obj), { for: 'htmlFor' })\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  '^' +\n    LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_COMMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state._inline || state._simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<\n  ReturnType<typeof parseInline>\n> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          _inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function (map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[mappedKey] =\n              attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node.content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node.content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node.target)}>\n            <sup key={state._key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(HEADING_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        node.tag = `h${node.level}` as MarkdownToJSX.HTMLTags\n        return (\n          <node.tag id={node.id} key={state._key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      id: string\n      level: number\n      tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node.target)}\n            title={node.title}\n          >\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      _match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state._inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function (item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state._inline depending\n          // on our list's looseness.\n          const oldStateInline = state._inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state._inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state._inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state._inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      _react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state._key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      items: MarkdownToJSX.ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: matchParagraph,\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node.content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      fallbackContent: MarkdownToJSX.ParserResult\n      ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node.content\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node.content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node.content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node.content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { _match: match, _parse: parse } = rules[key]\n\n  //   rules[key]._match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key]._parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          content,\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state._key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as MarkdownToJSX.ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<MarkdownToJSX.NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node.tag {...node.attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def.identifier)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { _inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}